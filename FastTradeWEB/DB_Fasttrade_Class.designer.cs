#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FastTradeWEB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FastTrade")]
	public partial class DB_Fasttrade_ClassDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAd(Ad instance);
    partial void UpdateAd(Ad instance);
    partial void DeleteAd(Ad instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertImage(Image instance);
    partial void UpdateImage(Image instance);
    partial void DeleteImage(Image instance);
    partial void InsertInfoReviewAd(InfoReviewAd instance);
    partial void UpdateInfoReviewAd(InfoReviewAd instance);
    partial void DeleteInfoReviewAd(InfoReviewAd instance);
    partial void InsertInfoReviewTag(InfoReviewTag instance);
    partial void UpdateInfoReviewTag(InfoReviewTag instance);
    partial void DeleteInfoReviewTag(InfoReviewTag instance);
    partial void InsertKind(Kind instance);
    partial void UpdateKind(Kind instance);
    partial void DeleteKind(Kind instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertSynonym(Synonym instance);
    partial void UpdateSynonym(Synonym instance);
    partial void DeleteSynonym(Synonym instance);
    partial void InsertTagAd(TagAd instance);
    partial void UpdateTagAd(TagAd instance);
    partial void DeleteTagAd(TagAd instance);
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    #endregion
		
		public DB_Fasttrade_ClassDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB_Fasttrade_ClassDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB_Fasttrade_ClassDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB_Fasttrade_ClassDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Ad> Ads
		{
			get
			{
				return this.GetTable<Ad>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Image> Images
		{
			get
			{
				return this.GetTable<Image>();
			}
		}
		
		public System.Data.Linq.Table<InfoReviewAd> InfoReviewAds
		{
			get
			{
				return this.GetTable<InfoReviewAd>();
			}
		}
		
		public System.Data.Linq.Table<InfoReviewTag> InfoReviewTags
		{
			get
			{
				return this.GetTable<InfoReviewTag>();
			}
		}
		
		public System.Data.Linq.Table<Kind> Kinds
		{
			get
			{
				return this.GetTable<Kind>();
			}
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Synonym> Synonyms
		{
			get
			{
				return this.GetTable<Synonym>();
			}
		}
		
		public System.Data.Linq.Table<TagAd> TagAds
		{
			get
			{
				return this.GetTable<TagAd>();
			}
		}
		
		public System.Data.Linq.Table<Tag> Tags
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ads")]
	public partial class Ad : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AdId;
		
		private string _Header;
		
		private string _Description;
		
		private float _Price;
		
		private int _UserId;
		
		private int _KindId;
		
		private int _CategoryId;
		
		private System.Nullable<System.DateTime> _DateAdd;
		
		private int _LocationId;
		
		private string _Address;
		
		private EntitySet<Image> _Images;
		
		private EntitySet<InfoReviewAd> _InfoReviewAds;
		
		private EntitySet<TagAd> _TagAds;
		
		private EntityRef<User> _User;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Kind> _Kind;
		
		private EntityRef<Location> _Location;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdIdChanging(int value);
    partial void OnAdIdChanged();
    partial void OnHeaderChanging(string value);
    partial void OnHeaderChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPriceChanging(float value);
    partial void OnPriceChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnKindIdChanging(int value);
    partial void OnKindIdChanged();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnDateAddChanging(System.Nullable<System.DateTime> value);
    partial void OnDateAddChanged();
    partial void OnLocationIdChanging(int value);
    partial void OnLocationIdChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public Ad()
		{
			this._Images = new EntitySet<Image>(new Action<Image>(this.attach_Images), new Action<Image>(this.detach_Images));
			this._InfoReviewAds = new EntitySet<InfoReviewAd>(new Action<InfoReviewAd>(this.attach_InfoReviewAds), new Action<InfoReviewAd>(this.detach_InfoReviewAds));
			this._TagAds = new EntitySet<TagAd>(new Action<TagAd>(this.attach_TagAds), new Action<TagAd>(this.detach_TagAds));
			this._User = default(EntityRef<User>);
			this._Category = default(EntityRef<Category>);
			this._Kind = default(EntityRef<Kind>);
			this._Location = default(EntityRef<Location>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AdId
		{
			get
			{
				return this._AdId;
			}
			set
			{
				if ((this._AdId != value))
				{
					this.OnAdIdChanging(value);
					this.SendPropertyChanging();
					this._AdId = value;
					this.SendPropertyChanged("AdId");
					this.OnAdIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Header", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Header
		{
			get
			{
				return this._Header;
			}
			set
			{
				if ((this._Header != value))
				{
					this.OnHeaderChanging(value);
					this.SendPropertyChanging();
					this._Header = value;
					this.SendPropertyChanged("Header");
					this.OnHeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Real NOT NULL")]
		public float Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KindId", DbType="Int NOT NULL")]
		public int KindId
		{
			get
			{
				return this._KindId;
			}
			set
			{
				if ((this._KindId != value))
				{
					if (this._Kind.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKindIdChanging(value);
					this.SendPropertyChanging();
					this._KindId = value;
					this.SendPropertyChanged("KindId");
					this.OnKindIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int NOT NULL")]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdd", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateAdd
		{
			get
			{
				return this._DateAdd;
			}
			set
			{
				if ((this._DateAdd != value))
				{
					this.OnDateAddChanging(value);
					this.SendPropertyChanging();
					this._DateAdd = value;
					this.SendPropertyChanged("DateAdd");
					this.OnDateAddChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", DbType="Int NOT NULL")]
		public int LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ad_Image", Storage="_Images", ThisKey="AdId", OtherKey="AdId")]
		public EntitySet<Image> Images
		{
			get
			{
				return this._Images;
			}
			set
			{
				this._Images.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ad_InfoReviewAd", Storage="_InfoReviewAds", ThisKey="AdId", OtherKey="AdId")]
		public EntitySet<InfoReviewAd> InfoReviewAds
		{
			get
			{
				return this._InfoReviewAds;
			}
			set
			{
				this._InfoReviewAds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ad_TagAd", Storage="_TagAds", ThisKey="AdId", OtherKey="Ad_AdId")]
		public EntitySet<TagAd> TagAds
		{
			get
			{
				return this._TagAds;
			}
			set
			{
				this._TagAds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Ad", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Ads.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Ads.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Ad", Storage="_Category", ThisKey="CategoryId", OtherKey="CategoryId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Ads.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Ads.Add(this);
						this._CategoryId = value.CategoryId;
					}
					else
					{
						this._CategoryId = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kind_Ad", Storage="_Kind", ThisKey="KindId", OtherKey="KindId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Kind Kind
		{
			get
			{
				return this._Kind.Entity;
			}
			set
			{
				Kind previousValue = this._Kind.Entity;
				if (((previousValue != value) 
							|| (this._Kind.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Kind.Entity = null;
						previousValue.Ads.Remove(this);
					}
					this._Kind.Entity = value;
					if ((value != null))
					{
						value.Ads.Add(this);
						this._KindId = value.KindId;
					}
					else
					{
						this._KindId = default(int);
					}
					this.SendPropertyChanged("Kind");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Ad", Storage="_Location", ThisKey="LocationId", OtherKey="LocationId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.Ads.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.Ads.Add(this);
						this._LocationId = value.LocationId;
					}
					else
					{
						this._LocationId = default(int);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Images(Image entity)
		{
			this.SendPropertyChanging();
			entity.Ad = this;
		}
		
		private void detach_Images(Image entity)
		{
			this.SendPropertyChanging();
			entity.Ad = null;
		}
		
		private void attach_InfoReviewAds(InfoReviewAd entity)
		{
			this.SendPropertyChanging();
			entity.Ad = this;
		}
		
		private void detach_InfoReviewAds(InfoReviewAd entity)
		{
			this.SendPropertyChanging();
			entity.Ad = null;
		}
		
		private void attach_TagAds(TagAd entity)
		{
			this.SendPropertyChanging();
			entity.Ad = this;
		}
		
		private void detach_TagAds(TagAd entity)
		{
			this.SendPropertyChanging();
			entity.Ad = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private System.Nullable<System.DateTime> _BirthDay;
		
		private decimal _Phone;
		
		private string _Password;
		
		private System.Nullable<int> _RoleId;
		
		private System.Nullable<System.DateTime> _DateReg;
		
		private EntitySet<Ad> _Ads;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnBirthDayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDayChanged();
    partial void OnPhoneChanging(decimal value);
    partial void OnPhoneChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnRoleIdChanging(System.Nullable<int> value);
    partial void OnRoleIdChanged();
    partial void OnDateRegChanging(System.Nullable<System.DateTime> value);
    partial void OnDateRegChanged();
    #endregion
		
		public User()
		{
			this._Ads = new EntitySet<Ad>(new Action<Ad>(this.attach_Ads), new Action<Ad>(this.detach_Ads));
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDay", DbType="DateTime")]
		public System.Nullable<System.DateTime> BirthDay
		{
			get
			{
				return this._BirthDay;
			}
			set
			{
				if ((this._BirthDay != value))
				{
					this.OnBirthDayChanging(value);
					this.SendPropertyChanging();
					this._BirthDay = value;
					this.SendPropertyChanged("BirthDay");
					this.OnBirthDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="Decimal(18,2) NOT NULL")]
		public decimal Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int")]
		public System.Nullable<int> RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateReg", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateReg
		{
			get
			{
				return this._DateReg;
			}
			set
			{
				if ((this._DateReg != value))
				{
					this.OnDateRegChanging(value);
					this.SendPropertyChanging();
					this._DateReg = value;
					this.SendPropertyChanged("DateReg");
					this.OnDateRegChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Ad", Storage="_Ads", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Ad> Ads
		{
			get
			{
				return this._Ads;
			}
			set
			{
				this._Ads.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ads(Ad entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Ads(Ad entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categories")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryId;
		
		private string _Name;
		
		private EntitySet<Ad> _Ads;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Category()
		{
			this._Ads = new EntitySet<Ad>(new Action<Ad>(this.attach_Ads), new Action<Ad>(this.detach_Ads));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Ad", Storage="_Ads", ThisKey="CategoryId", OtherKey="CategoryId")]
		public EntitySet<Ad> Ads
		{
			get
			{
				return this._Ads;
			}
			set
			{
				this._Ads.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ads(Ad entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Ads(Ad entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Images")]
	public partial class Image : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ImageId;
		
		private string _Name;
		
		private string _PathToSmall;
		
		private string _PathToOriginal;
		
		private System.Nullable<int> _AdId;
		
		private EntityRef<Ad> _Ad;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImageIdChanging(int value);
    partial void OnImageIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPathToSmallChanging(string value);
    partial void OnPathToSmallChanged();
    partial void OnPathToOriginalChanging(string value);
    partial void OnPathToOriginalChanged();
    partial void OnAdIdChanging(System.Nullable<int> value);
    partial void OnAdIdChanged();
    #endregion
		
		public Image()
		{
			this._Ad = default(EntityRef<Ad>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ImageId
		{
			get
			{
				return this._ImageId;
			}
			set
			{
				if ((this._ImageId != value))
				{
					this.OnImageIdChanging(value);
					this.SendPropertyChanging();
					this._ImageId = value;
					this.SendPropertyChanged("ImageId");
					this.OnImageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PathToSmall", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PathToSmall
		{
			get
			{
				return this._PathToSmall;
			}
			set
			{
				if ((this._PathToSmall != value))
				{
					this.OnPathToSmallChanging(value);
					this.SendPropertyChanging();
					this._PathToSmall = value;
					this.SendPropertyChanged("PathToSmall");
					this.OnPathToSmallChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PathToOriginal", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PathToOriginal
		{
			get
			{
				return this._PathToOriginal;
			}
			set
			{
				if ((this._PathToOriginal != value))
				{
					this.OnPathToOriginalChanging(value);
					this.SendPropertyChanging();
					this._PathToOriginal = value;
					this.SendPropertyChanged("PathToOriginal");
					this.OnPathToOriginalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdId", DbType="Int")]
		public System.Nullable<int> AdId
		{
			get
			{
				return this._AdId;
			}
			set
			{
				if ((this._AdId != value))
				{
					if (this._Ad.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdIdChanging(value);
					this.SendPropertyChanging();
					this._AdId = value;
					this.SendPropertyChanged("AdId");
					this.OnAdIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ad_Image", Storage="_Ad", ThisKey="AdId", OtherKey="AdId", IsForeignKey=true)]
		public Ad Ad
		{
			get
			{
				return this._Ad.Entity;
			}
			set
			{
				Ad previousValue = this._Ad.Entity;
				if (((previousValue != value) 
							|| (this._Ad.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ad.Entity = null;
						previousValue.Images.Remove(this);
					}
					this._Ad.Entity = value;
					if ((value != null))
					{
						value.Images.Add(this);
						this._AdId = value.AdId;
					}
					else
					{
						this._AdId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Ad");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InfoReviewAds")]
	public partial class InfoReviewAd : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InfoReviewAdId;
		
		private System.DateTime _InfoReviewAdDate;
		
		private int _AdId;
		
		private EntityRef<Ad> _Ad;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInfoReviewAdIdChanging(int value);
    partial void OnInfoReviewAdIdChanged();
    partial void OnInfoReviewAdDateChanging(System.DateTime value);
    partial void OnInfoReviewAdDateChanged();
    partial void OnAdIdChanging(int value);
    partial void OnAdIdChanged();
    #endregion
		
		public InfoReviewAd()
		{
			this._Ad = default(EntityRef<Ad>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InfoReviewAdId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InfoReviewAdId
		{
			get
			{
				return this._InfoReviewAdId;
			}
			set
			{
				if ((this._InfoReviewAdId != value))
				{
					this.OnInfoReviewAdIdChanging(value);
					this.SendPropertyChanging();
					this._InfoReviewAdId = value;
					this.SendPropertyChanged("InfoReviewAdId");
					this.OnInfoReviewAdIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InfoReviewAdDate", DbType="DateTime NOT NULL")]
		public System.DateTime InfoReviewAdDate
		{
			get
			{
				return this._InfoReviewAdDate;
			}
			set
			{
				if ((this._InfoReviewAdDate != value))
				{
					this.OnInfoReviewAdDateChanging(value);
					this.SendPropertyChanging();
					this._InfoReviewAdDate = value;
					this.SendPropertyChanged("InfoReviewAdDate");
					this.OnInfoReviewAdDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdId", DbType="Int NOT NULL")]
		public int AdId
		{
			get
			{
				return this._AdId;
			}
			set
			{
				if ((this._AdId != value))
				{
					if (this._Ad.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdIdChanging(value);
					this.SendPropertyChanging();
					this._AdId = value;
					this.SendPropertyChanged("AdId");
					this.OnAdIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ad_InfoReviewAd", Storage="_Ad", ThisKey="AdId", OtherKey="AdId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Ad Ad
		{
			get
			{
				return this._Ad.Entity;
			}
			set
			{
				Ad previousValue = this._Ad.Entity;
				if (((previousValue != value) 
							|| (this._Ad.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ad.Entity = null;
						previousValue.InfoReviewAds.Remove(this);
					}
					this._Ad.Entity = value;
					if ((value != null))
					{
						value.InfoReviewAds.Add(this);
						this._AdId = value.AdId;
					}
					else
					{
						this._AdId = default(int);
					}
					this.SendPropertyChanged("Ad");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InfoReviewTags")]
	public partial class InfoReviewTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InfoReviewTagId;
		
		private System.DateTime _InfoReviewTagDate;
		
		private int _TagId;
		
		private EntityRef<Tag> _Tag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInfoReviewTagIdChanging(int value);
    partial void OnInfoReviewTagIdChanged();
    partial void OnInfoReviewTagDateChanging(System.DateTime value);
    partial void OnInfoReviewTagDateChanged();
    partial void OnTagIdChanging(int value);
    partial void OnTagIdChanged();
    #endregion
		
		public InfoReviewTag()
		{
			this._Tag = default(EntityRef<Tag>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InfoReviewTagId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InfoReviewTagId
		{
			get
			{
				return this._InfoReviewTagId;
			}
			set
			{
				if ((this._InfoReviewTagId != value))
				{
					this.OnInfoReviewTagIdChanging(value);
					this.SendPropertyChanging();
					this._InfoReviewTagId = value;
					this.SendPropertyChanged("InfoReviewTagId");
					this.OnInfoReviewTagIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InfoReviewTagDate", DbType="DateTime NOT NULL")]
		public System.DateTime InfoReviewTagDate
		{
			get
			{
				return this._InfoReviewTagDate;
			}
			set
			{
				if ((this._InfoReviewTagDate != value))
				{
					this.OnInfoReviewTagDateChanging(value);
					this.SendPropertyChanging();
					this._InfoReviewTagDate = value;
					this.SendPropertyChanged("InfoReviewTagDate");
					this.OnInfoReviewTagDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagId", DbType="Int NOT NULL")]
		public int TagId
		{
			get
			{
				return this._TagId;
			}
			set
			{
				if ((this._TagId != value))
				{
					if (this._Tag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTagIdChanging(value);
					this.SendPropertyChanging();
					this._TagId = value;
					this.SendPropertyChanged("TagId");
					this.OnTagIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_InfoReviewTag", Storage="_Tag", ThisKey="TagId", OtherKey="TagId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Tag Tag
		{
			get
			{
				return this._Tag.Entity;
			}
			set
			{
				Tag previousValue = this._Tag.Entity;
				if (((previousValue != value) 
							|| (this._Tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tag.Entity = null;
						previousValue.InfoReviewTags.Remove(this);
					}
					this._Tag.Entity = value;
					if ((value != null))
					{
						value.InfoReviewTags.Add(this);
						this._TagId = value.TagId;
					}
					else
					{
						this._TagId = default(int);
					}
					this.SendPropertyChanged("Tag");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Kinds")]
	public partial class Kind : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _KindId;
		
		private string _Name;
		
		private EntitySet<Ad> _Ads;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKindIdChanging(int value);
    partial void OnKindIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Kind()
		{
			this._Ads = new EntitySet<Ad>(new Action<Ad>(this.attach_Ads), new Action<Ad>(this.detach_Ads));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KindId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int KindId
		{
			get
			{
				return this._KindId;
			}
			set
			{
				if ((this._KindId != value))
				{
					this.OnKindIdChanging(value);
					this.SendPropertyChanging();
					this._KindId = value;
					this.SendPropertyChanged("KindId");
					this.OnKindIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kind_Ad", Storage="_Ads", ThisKey="KindId", OtherKey="KindId")]
		public EntitySet<Ad> Ads
		{
			get
			{
				return this._Ads;
			}
			set
			{
				this._Ads.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ads(Ad entity)
		{
			this.SendPropertyChanging();
			entity.Kind = this;
		}
		
		private void detach_Ads(Ad entity)
		{
			this.SendPropertyChanging();
			entity.Kind = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Locations")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocationId;
		
		private string _LocationName;
		
		private EntitySet<Ad> _Ads;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIdChanging(int value);
    partial void OnLocationIdChanged();
    partial void OnLocationNameChanging(string value);
    partial void OnLocationNameChanged();
    #endregion
		
		public Location()
		{
			this._Ads = new EntitySet<Ad>(new Action<Ad>(this.attach_Ads), new Action<Ad>(this.detach_Ads));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationName", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string LocationName
		{
			get
			{
				return this._LocationName;
			}
			set
			{
				if ((this._LocationName != value))
				{
					this.OnLocationNameChanging(value);
					this.SendPropertyChanging();
					this._LocationName = value;
					this.SendPropertyChanged("LocationName");
					this.OnLocationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Ad", Storage="_Ads", ThisKey="LocationId", OtherKey="LocationId")]
		public EntitySet<Ad> Ads
		{
			get
			{
				return this._Ads;
			}
			set
			{
				this._Ads.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ads(Ad entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_Ads(Ad entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleId;
		
		private string _RoleName;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    #endregion
		
		public Role()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(MAX)")]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Users", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Synonyms")]
	public partial class Synonym : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SynonymId;
		
		private string _SynonymName;
		
		private int _TagId;
		
		private EntityRef<Tag> _Tag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSynonymIdChanging(int value);
    partial void OnSynonymIdChanged();
    partial void OnSynonymNameChanging(string value);
    partial void OnSynonymNameChanged();
    partial void OnTagIdChanging(int value);
    partial void OnTagIdChanged();
    #endregion
		
		public Synonym()
		{
			this._Tag = default(EntityRef<Tag>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SynonymId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SynonymId
		{
			get
			{
				return this._SynonymId;
			}
			set
			{
				if ((this._SynonymId != value))
				{
					this.OnSynonymIdChanging(value);
					this.SendPropertyChanging();
					this._SynonymId = value;
					this.SendPropertyChanged("SynonymId");
					this.OnSynonymIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SynonymName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string SynonymName
		{
			get
			{
				return this._SynonymName;
			}
			set
			{
				if ((this._SynonymName != value))
				{
					this.OnSynonymNameChanging(value);
					this.SendPropertyChanging();
					this._SynonymName = value;
					this.SendPropertyChanged("SynonymName");
					this.OnSynonymNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagId", DbType="Int NOT NULL")]
		public int TagId
		{
			get
			{
				return this._TagId;
			}
			set
			{
				if ((this._TagId != value))
				{
					if (this._Tag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTagIdChanging(value);
					this.SendPropertyChanging();
					this._TagId = value;
					this.SendPropertyChanged("TagId");
					this.OnTagIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_Synonym", Storage="_Tag", ThisKey="TagId", OtherKey="TagId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Tag Tag
		{
			get
			{
				return this._Tag.Entity;
			}
			set
			{
				Tag previousValue = this._Tag.Entity;
				if (((previousValue != value) 
							|| (this._Tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tag.Entity = null;
						previousValue.Synonyms.Remove(this);
					}
					this._Tag.Entity = value;
					if ((value != null))
					{
						value.Synonyms.Add(this);
						this._TagId = value.TagId;
					}
					else
					{
						this._TagId = default(int);
					}
					this.SendPropertyChanged("Tag");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TagAds")]
	public partial class TagAd : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Tag_TagId;
		
		private int _Ad_AdId;
		
		private EntityRef<Ad> _Ad;
		
		private EntityRef<Tag> _Tag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTag_TagIdChanging(int value);
    partial void OnTag_TagIdChanged();
    partial void OnAd_AdIdChanging(int value);
    partial void OnAd_AdIdChanged();
    #endregion
		
		public TagAd()
		{
			this._Ad = default(EntityRef<Ad>);
			this._Tag = default(EntityRef<Tag>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tag_TagId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Tag_TagId
		{
			get
			{
				return this._Tag_TagId;
			}
			set
			{
				if ((this._Tag_TagId != value))
				{
					if (this._Tag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTag_TagIdChanging(value);
					this.SendPropertyChanging();
					this._Tag_TagId = value;
					this.SendPropertyChanged("Tag_TagId");
					this.OnTag_TagIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ad_AdId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Ad_AdId
		{
			get
			{
				return this._Ad_AdId;
			}
			set
			{
				if ((this._Ad_AdId != value))
				{
					if (this._Ad.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAd_AdIdChanging(value);
					this.SendPropertyChanging();
					this._Ad_AdId = value;
					this.SendPropertyChanged("Ad_AdId");
					this.OnAd_AdIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ad_TagAd", Storage="_Ad", ThisKey="Ad_AdId", OtherKey="AdId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Ad Ad
		{
			get
			{
				return this._Ad.Entity;
			}
			set
			{
				Ad previousValue = this._Ad.Entity;
				if (((previousValue != value) 
							|| (this._Ad.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ad.Entity = null;
						previousValue.TagAds.Remove(this);
					}
					this._Ad.Entity = value;
					if ((value != null))
					{
						value.TagAds.Add(this);
						this._Ad_AdId = value.AdId;
					}
					else
					{
						this._Ad_AdId = default(int);
					}
					this.SendPropertyChanged("Ad");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_TagAd", Storage="_Tag", ThisKey="Tag_TagId", OtherKey="TagId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Tag Tag
		{
			get
			{
				return this._Tag.Entity;
			}
			set
			{
				Tag previousValue = this._Tag.Entity;
				if (((previousValue != value) 
							|| (this._Tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tag.Entity = null;
						previousValue.TagAds.Remove(this);
					}
					this._Tag.Entity = value;
					if ((value != null))
					{
						value.TagAds.Add(this);
						this._Tag_TagId = value.TagId;
					}
					else
					{
						this._Tag_TagId = default(int);
					}
					this.SendPropertyChanged("Tag");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tags")]
	public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TagId;
		
		private string _TagName;
		
		private int _CountAd;
		
		private int _CountReq;
		
		private EntitySet<InfoReviewTag> _InfoReviewTags;
		
		private EntitySet<Synonym> _Synonyms;
		
		private EntitySet<TagAd> _TagAds;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTagIdChanging(int value);
    partial void OnTagIdChanged();
    partial void OnTagNameChanging(string value);
    partial void OnTagNameChanged();
    partial void OnCountAdChanging(int value);
    partial void OnCountAdChanged();
    partial void OnCountReqChanging(int value);
    partial void OnCountReqChanged();
    #endregion
		
		public Tag()
		{
			this._InfoReviewTags = new EntitySet<InfoReviewTag>(new Action<InfoReviewTag>(this.attach_InfoReviewTags), new Action<InfoReviewTag>(this.detach_InfoReviewTags));
			this._Synonyms = new EntitySet<Synonym>(new Action<Synonym>(this.attach_Synonyms), new Action<Synonym>(this.detach_Synonyms));
			this._TagAds = new EntitySet<TagAd>(new Action<TagAd>(this.attach_TagAds), new Action<TagAd>(this.detach_TagAds));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TagId
		{
			get
			{
				return this._TagId;
			}
			set
			{
				if ((this._TagId != value))
				{
					this.OnTagIdChanging(value);
					this.SendPropertyChanging();
					this._TagId = value;
					this.SendPropertyChanged("TagId");
					this.OnTagIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TagName
		{
			get
			{
				return this._TagName;
			}
			set
			{
				if ((this._TagName != value))
				{
					this.OnTagNameChanging(value);
					this.SendPropertyChanging();
					this._TagName = value;
					this.SendPropertyChanged("TagName");
					this.OnTagNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountAd", DbType="Int NOT NULL")]
		public int CountAd
		{
			get
			{
				return this._CountAd;
			}
			set
			{
				if ((this._CountAd != value))
				{
					this.OnCountAdChanging(value);
					this.SendPropertyChanging();
					this._CountAd = value;
					this.SendPropertyChanged("CountAd");
					this.OnCountAdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountReq", DbType="Int NOT NULL")]
		public int CountReq
		{
			get
			{
				return this._CountReq;
			}
			set
			{
				if ((this._CountReq != value))
				{
					this.OnCountReqChanging(value);
					this.SendPropertyChanging();
					this._CountReq = value;
					this.SendPropertyChanged("CountReq");
					this.OnCountReqChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_InfoReviewTag", Storage="_InfoReviewTags", ThisKey="TagId", OtherKey="TagId")]
		public EntitySet<InfoReviewTag> InfoReviewTags
		{
			get
			{
				return this._InfoReviewTags;
			}
			set
			{
				this._InfoReviewTags.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_Synonym", Storage="_Synonyms", ThisKey="TagId", OtherKey="TagId")]
		public EntitySet<Synonym> Synonyms
		{
			get
			{
				return this._Synonyms;
			}
			set
			{
				this._Synonyms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_TagAd", Storage="_TagAds", ThisKey="TagId", OtherKey="Tag_TagId")]
		public EntitySet<TagAd> TagAds
		{
			get
			{
				return this._TagAds;
			}
			set
			{
				this._TagAds.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InfoReviewTags(InfoReviewTag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = this;
		}
		
		private void detach_InfoReviewTags(InfoReviewTag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = null;
		}
		
		private void attach_Synonyms(Synonym entity)
		{
			this.SendPropertyChanging();
			entity.Tag = this;
		}
		
		private void detach_Synonyms(Synonym entity)
		{
			this.SendPropertyChanging();
			entity.Tag = null;
		}
		
		private void attach_TagAds(TagAd entity)
		{
			this.SendPropertyChanging();
			entity.Tag = this;
		}
		
		private void detach_TagAds(TagAd entity)
		{
			this.SendPropertyChanging();
			entity.Tag = null;
		}
	}
}
#pragma warning restore 1591
